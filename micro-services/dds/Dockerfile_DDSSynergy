# Dockerfile to build DDS router application as a docker image
# 
# Author: sreejith.naarakathil@gmail.com
#
# TODO: $ docker run --network="host" -ti --rm ddssynergy:1.0.5
#[Integration Service][ERROR] [is::core::Config] Error parsing the IDL number '1' placed in the YAML config. Please, review and fix# your IDL specification syntax.

# Alpine is chosen to build the image because it has good support for creating
# statically-linked, small programs. Currently the DDS router application is
# not statically linked due to build issues in DDS Router.

# nlohmann json has a build error gcc 10.3.1. Hence using debian
# ARG DISTRO_VERSION=3.15.4
# FROM alpine:${DISTRO_VERSION} AS base

ARG DISTRO_VERSION=buster-slim
FROM debian:${DISTRO_VERSION} AS base

# Create separate targets for each phase, this allows us to cache intermediate
# stages and makes the final deployment stage
# small as it contains only what is needed.
FROM base AS devtools

# Install the typical development tools and some additions:
#   - ninja-build is a backend for CMake that often compiles faster than
#     CMake with GNU Make.
#   - Install the necessary libraries required for DDS router application.
# RUN apk update && \
#     apk add \
#         asio-dev \
#         tinyxml2-dev \
#         build-base \
#         cmake \
#         git \
#         gcc \
#         g++ \
#         libc-dev \
#         yaml-cpp-dev \
#         ninja \
#         openssl-dev \
#         openssl-libs-static \
# 	py3-sphinx \
# 	py3-sphinx_rtd_theme \
#         websocket++ \
# 	boost-dev \
# 	libexecinfo \
# 	libexecinfo-dev

RUN apt-get update && \
    apt-get install -y \
        libasio-dev \
        libtinyxml2-dev \
        build-essential \
        cmake \
        git \
        gcc \
        g++ \
        libc-dev \
        libyaml-cpp-dev \
        libssl-dev \
	python3-sphinx \
	python3-sphinx-rtd-theme \
        libwebsocketpp-dev \
	libboost-program-options-dev \
	libboost-system-dev

# Copy the source code to /app and compile it.
FROM devtools AS build
WORKDIR /app
COPY . /app
RUN rm -rf build install log
#RUN mkdir -p build/foonathan_memory_vendor
#RUN mkdir -p build/fastcdr
#RUN mkdir -p build/fastdds
#RUN mkdir -p build/ddsrouter

# Run the CMake in each dependency project and install it.
WORKDIR /app/build/foonathan_memory_vendor
RUN cmake -DCMAKE_BUILD_TYPE=Release /app/src/foonathan_memory_vendor
RUN make && make install

WORKDIR /app/build/fastcdr
RUN cmake -DCMAKE_BUILD_TYPE=Release /app/src/fastcdr
RUN make && make install

WORKDIR /app/build/fastdds
RUN cmake -DCMAKE_BUILD_TYPE=Release /app/src/fastdds
RUN make && make install

WORKDIR /app/build/ddsrouter
RUN cmake -DCMAKE_BUILD_TYPE=Release /app/src/ddsrouter
RUN make && make install

# Order is important - start
WORKDIR /app/build/Integration-Service/thirdparty/xtypes
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_FASTDDS_EXAMPLES=ON -DBUILD_WEBSOCKET_EXAMPLES=ON /app/src/Integration-Service/thirdparty/xtypes
RUN make && make install

WORKDIR /app/build/Integration-Service/core
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_FASTDDS_EXAMPLES=ON -DBUILD_WEBSOCKET_EXAMPLES=ON /app/src/Integration-Service/core
RUN make && make install

WORKDIR /app/build/Integration-Service/utils/conversion/json-xtypes
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_FASTDDS_EXAMPLES=ON -DBUILD_WEBSOCKET_EXAMPLES=ON /app/src/Integration-Service/utils/conversion/json-xtypes
RUN make && make install

WORKDIR /app/build/WebSocket-SH
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_FASTDDS_EXAMPLES=ON -DBUILD_WEBSOCKET_EXAMPLES=ON /app/src/WebSocket-SH
RUN make && make install

WORKDIR /app/build/FastDDS-SH
RUN cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_FASTDDS_EXAMPLES=ON -DBUILD_WEBSOCKET_EXAMPLES=ON /app/src/FastDDS-SH
RUN make && make install
# Order is important - end


# Create the final deployment image, using `alpine`as the starting point.
FROM debian:${DISTRO_VERSION} AS final

# Copy the program and shared libraries from the previously created stage and make it the entry point.
COPY --from=build /usr/local/bin/integration-service /
COPY --from=build /usr/local/share/is-core/examples/basic/fastdds_server__addtwoints.yaml /
COPY --from=build /usr/local/lib/libfoonathan_memory* /lib/
COPY --from=build /usr/local/lib/libfastcdr* /lib/
COPY --from=build /usr/local/lib/libfastrtps* /lib/
COPY --from=build /usr/local/lib/libis-core* /lib/
COPY --from=build /usr/local/lib/libis-json-xtypes* /lib/
COPY --from=build /usr/local/lib/libis-websocket* /lib/
COPY --from=build /usr/local/lib/libis-fastdds* /lib/

RUN apt-get update && \
    apt-get install -y \
	libstdc++6 \
	libgcc1 \
	libyaml-cpp-dev \
	libboost-program-options-dev \
	libboost-system-dev

ENTRYPOINT ["./integration-service"]
CMD ["/fastdds_server__addtwoints.yaml"]
